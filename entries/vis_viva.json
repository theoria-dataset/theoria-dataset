{
  "result_id": "vis_viva",
  "result_name": "Vis-Viva Equation",
  "result_equations": [
    {
      "id": "eq1",
      "equation": "v^2=GM(2/r-1/a)"
    }
  ],
  "explanation": "The Vis-Viva equation relates the velocity of a particle in an elliptical, hyperbolic or parabolic orbit to the distance to the barycenter, mass of the body it's orbiting, and the semi-major axis of the orbit. This sets the basis for velocity calculations in non-circular orbits and allows us to later derive equations like the equation for escape velocity with ease.",
  "definitions": [
    {
      "symbol": "v",
      "definition": "Orbital velocity of the particle"
    },
    {
      "symbol": "G",
      "definition": "Newton's Gravitational Constant"
    },
    {
      "symbol": "M",
      "definition": "Mass of the body being orbited"
    },
    {
      "symbol": "r",
      "definition": "Distance from the center of mass of the orbiting body to the barycenter of the system"
    },
    {
      "symbol": "a",
      "definition": "The semi-major axis of the orbit"
    }
  ],
  "assumptions": [
    {
      "id": "assumption1",
      "text": "The orbiting body behaves as a point mass"
    },
    {
      "id": "assumption2",
      "text": "The sum of the Kinetic energy and Gravitational Potential energy of the particle remains constant"
    },
    {
      "id": "assumption3",
      "text": "The only force acting on the particle is the force due to Gravity"
    },
    {
      "id": "assumption4",
      "text": "The massses of all the bodies in the system remains constant"
    },
    {
      "id": "assumption5",
      "text": "Conservation of momentum holds"
    }
  ],
  "derivation": [
    {
      "step": 1,
      "description": "Apply conservation of energy to equate the energies at the apoapsis and periapsis",
      "equation": "1/2 mv_a^2 - (GMm)/r_a = 1/2mv_p^2-(GMm)/r_p"
    },
    {
      "step": 2,
      "description": "Rearrange and simplify the expression in step one",
      "equation": "v_a^2/2 - v_p^2/2 = (GM)/r_a - (GM)/r_p"
    },
    {
      "step": 3,
      "description": "Use conservation of momentum to obtain an expression for `v_p` in terms of `r_a`, `r_p` and `v_a`",
      "equation": "L=const=v_ar_a=v_pr_p => v_p = (r_av_a)/r_p"
    },
    {
      "step": 4,
      "description": "Substitute this expression into the energy equation from step 2",
      "equation": "1/2(1-(r_a/r_p)^2)v_a^2 = (GM)/r_a - (GM)/r_p"
    },
    {
      "step": 5,
      "description": "Isolate `v_a^2/2` (KE at apoapsis)",
      "equation": "v_a^2/2 = GMr_p/(r_a(r_p+r_a))"
    },
    {
      "step": 6,
      "description": "Use the identity `r_a+r_p=2a` to simplify the expression",
      "equation": "v_a^2/2 = GM(2a-r_a)/(r_a(2a)) = (GM)/r_a-(GM)/(2a)"
    },
    {
      "step": 7,
      "description": "Equate the total energy at any point in the orbit where the particle's velocity is v with the velocity at the apoapsis and use the expression from step 6 to eliminate `r_a` and `v_a`",
      "equation": "v^2/2 - (GM)/r = v_a^2/2 - (GM)/r_a = -(GM)/(2a)"
    },
    {
      "step": 8,
      "description": "Rearrange the expression `v^2/2 - GM/r = -(GM)/(2a)`",
      "equation": "v^2 = GM(2/r-1/a)"
    }
  ],
  "programmatic_verification": {
    "language": "python 3.11.12",
    "library": "sympy 1.12.0",
    "code": [
      "# imports",
      "import sympy as sp",
      "from math import sqrt",
      "# set symbols",
      "G, M, a, r, v= sp.symbols('G M a r v', positive=True)",
      "v_a, v_p, r_a, r_p = sp.symbols('v_a v_p r_a r_p', positive=True)",
      "# Step 1 - 2: get an expression of the specific energy for periapsis and apoapsis, equate and simplify",
      "E_a = 1/2 *  v_a**2 - (G*M)/(r_a)",
      "E_p = 1/2 *  v_p**2 - (G*M)/(r_p)",
      "energy_conservation = sp.simplify(sp.Eq(E_a, E_p)) # this should simplify the two",
      "# step 3: obtain an expression for v_p in terms of r_p, v_a and r_a",
      "# L_a and L_p are the angular momentum at the apoapsis and periapsis respectively",
      "L_a = v_a*r_a",
      "L_p = v_p*r_p",
      "momentum_conservation = sp.Eq(L_p, L_a) # using conservation of momentum",
      "# Solve for v_p from momentum conservation",
      "expr_for_v_p = sp.solve(momentum_conservation, v_p)[0]  # Get first solution",
      "# Step 4: substitute v_p into energy conservation equation",
      "energy_conservation = sp.simplify(energy_conservation.subs(v_p, expr_for_v_p))",
      "# step 5: rearrange for v_a^2/2 a.k.a the specific Kinetic energy at apoapsis",
      "energy_conservation = sp.solve(energy_conservation, v_a**2)[0]",
      "energy_conservation /= 2",
      "# step 6: use identity r_p + r_a = 2a to simplify",
      "energy_conservation = sp.simplify(energy_conservation.subs(r_p, 2*a - r_a))",
      "# step 7: use the expression in step 6 to rewrite the energy E_a in terms of just G, M and a",
      "E_a = sp.simplify(E_a.subs(v_a**2, energy_conservation*2))",
      "# step 8",
      "# equate E_a to the formula for the specific energy at any arbritrary point where the distance to the barycenter is r and the velocity is v",
      "E_general = v**2/2 - (G*M)/r",
      "vis_viva_equation = sp.Eq(E_a, E_general)",
      "# rearrange for v^2",
      "vis_viva_equation = sp.simplify(sp.solve(vis_viva_equation, v**2)[0])",
      "# check that this is equal to the vis viva equation we derived earlier",
      "vis_viva_expected = G*M*(2/r - 1/a)",
      "assert sp.simplify(vis_viva_equation - vis_viva_expected) == 0"
    ]
  },
  "domain": "astro-ph",
  "theory_status": "current",
  "validity_regime": {
    "conditions": [
      "Non-relativistic situation",
      "Orbit is stable",
      "Orbiting body behaves as a point particle"
    ],
    "limitations": [
      "Limited to non-relativistic situations"
    ]
  },
  "historical_context": {
    "importance": "Heavily used in astrophysics and astrodynamics to calculate the velocities of orbiting objects. From this equation one can easily derive other equations such as the formula for escape velocity.",
    "development_period": "1676â€“1689",
    "key_insights": [
      "Orbital velocities",
      "Conservation of energy in orbits"
    ]
  },
  "references": [
    {
      "id": "R1",
      "citation": "Logsdon, Thomas S.; Logsdon, Tom (1998). Orbital mechanics: theory and applications."
    }
  ],
  "dependencies": [
    "conservation_of_energy",
    "angular_momentum",
    "gravitational_force"
  ],
  "contributors": [
    {
      "full_name": "@Astrophysics108",
      "identifier": "https://astrophysics108.github.io/delana"
    }
  ],
  "review_status": "reviewed"
}