{
  "result_id": "keplers_laws",
  "result_name": "Kepler's Laws of Planetary Motion",
  "result_equations": [
    {
      "id": "eq1",
      "equation": "r = (a(1-e^2))/(1 + e cos(theta))"
    },
    {
      "id": "eq2",
      "equation": "(dA)/(dt) = (L)/(2m) = text{constant}"
    },
    {
      "id": "eq3",
      "equation": "T^2 = (4pi^2a^3)/(GM)"
    }
  ],
  "explanation": "Kepler's three laws describe planetary motion around the Sun: orbits are ellipses with the Sun at one focus, planets sweep equal areas in equal times, and the square of orbital period is proportional to the cube of the semi-major axis. These empirical laws provided the foundation for Newton's law of gravitation and remain fundamental to celestial mechanics and orbital dynamics.",
  "definitions": [
    {
      "symbol": "r",
      "definition": "Distance from the focus (Sun) to the planet at angle `theta`"
    },
    {
      "symbol": "a",
      "definition": "Semi-major axis of the elliptical orbit"
    },
    {
      "symbol": "e",
      "definition": "Eccentricity of the ellipse (0 ≤ e < 1 for bound orbits)"
    },
    {
      "symbol": "theta",
      "definition": "True anomaly (angle from periapsis to current position)"
    },
    {
      "symbol": "A",
      "definition": "Area swept by the radius vector"
    },
    {
      "symbol": "L",
      "definition": "Angular momentum of the planet"
    },
    {
      "symbol": "m",
      "definition": "Mass of the planet"
    },
    {
      "symbol": "T",
      "definition": "Orbital period of the planet"
    },
    {
      "symbol": "G",
      "definition": "Gravitational constant"
    },
    {
      "symbol": "M",
      "definition": "Mass of the central body (Sun)"
    }
  ],
  "assumptions": [
    {
      "id": "assumption1",
      "text": "Classical mechanics framework: relativistic effects are negligible for typical planetary orbital velocities `v < < c`, and quantum effects are negligible for macroscopic celestial bodies, allowing application of Newton's laws."
    },
    {
      "id": "assumption2",
      "text": "Newton's law of universal gravitation: the gravitational force between two point masses is `F = G*M*m/r^2` directed along the line connecting them, where `G` is the gravitational constant."
    },
    {
      "id": "assumption3",
      "text": "Two-body problem: only gravitational interaction between the central body and orbiting body is considered, neglecting all other gravitational perturbations from other celestial bodies."
    },
    {
      "id": "assumption4",
      "text": "Point mass approximation: both the central body and orbiting body can be treated as point masses located at their centers of mass, with spherically symmetric mass distributions."
    },
    {
      "id": "assumption5",
      "text": "Central body dominance: the central body (Sun) mass `M > > m` where `m` is the planet mass, allowing treatment of the central body as effectively fixed at the origin (reduced mass approximation)."
    },
    {
      "id": "assumption6",
      "text": "Rotational dynamics relation: the time rate of change of angular momentum equals the applied torque, `dot(vec(L)) = vec(tau)`."
    }
  ],
  "derivation": [
    {
      "step": 1,
      "description": "Start with Newton's law of gravitation as the central force (assumption 2). Here `vec(F)` is the force vector, `vec(r)` is the position vector from Sun to planet, `r = |vec(r)|` is the distance, and `hat(r) = vec(r)/r` is the unit vector in the radial direction.",
      "equation": "vec(F) = -G*M*m/r^2 * hat(r)"
    },
    {
      "step": 2,
      "description": "Calculate torque: since `vec(F)` is parallel to `vec(r)` (both along radial direction), their cross product `vec(tau) = vec(r) times vec(F)` is zero.",
      "equation": "vec(tau) = vec(r) times vec(F) = vec(r) times (-G*M*m/r^2 * hat(r)) = 0"
    },
    {
      "step": 3,
      "description": "Apply the fundamental relation `dot(vec(L)) = vec(tau)` from rotational dynamics (assumption 6) and substitute `vec(tau) = 0` from step 2: since torque is zero, the time derivative of angular momentum is zero.",
      "equation": "dot(vec(L)) = vec(tau) = 0"
    },
    {
      "step": 4,
      "description": "Since `dot(vec(L)) = 0`, integrating with respect to time gives `vec(L) = text{constant}` - this proves conservation of angular momentum for central forces.",
      "equation": "vec(L) = vec(r) times vec(p) = text{constant}"
    },
    {
      "step": 5,
      "description": "Use the definition of angular momentum magnitude for a point mass: `L = m*r^2*dot(theta)` where `dot(theta)` is the angular velocity.",
      "equation": "L = m*r^2*dot(theta)"
    },
    {
      "step": 6,
      "description": "Kepler's 2nd law: using the area formula for circular sectors `dA = 1/2*r^2*d theta` and substituting angular momentum, the areal velocity `dot(A) = L/(2*m)` is constant.",
      "equation": "dot(A) = 1/2*r^2*dot(theta) = L/(2*m)"
    },
    {
      "step": 7,
      "description": "Newton's law for a test mass in the gravitational field of mass `M`.",
      "equation": "ddot(vec(r)) = -G*M/r^2 * hat(r)"
    },
    {
      "step": 8,
      "description": "In plane polar coordinates, acceleration decomposes into radial and tangential components.",
      "equation": "ddot(vec(r)) = (ddot(r) - r*dot(theta)^2)*hat(r) + (r*ddot(theta) + 2*dot(r)*dot(theta))*hat(theta)"
    },
    {
      "step": 9,
      "description": "Central force implies the tangential component must vanish, giving the angular momentum conservation condition.",
      "equation": "r*ddot(theta) + 2*dot(r)*dot(theta) = 0"
    },
    {
      "step": 10,
      "description": "The tangential equation can be written as a time derivative of `r^2*dot(theta)`.",
      "equation": "(d)/(dt)(r^2*dot(theta)) = 0"
    },
    {
      "step": 11,
      "description": "Define specific angular momentum `h = r^2*dot(theta)` which is conserved for central forces.",
      "equation": "h := r^2*dot(theta) = text{constant}"
    },
    {
      "step": 12,
      "description": "Match the radial component to the gravitational force.",
      "equation": "ddot(r) - r*dot(theta)^2 = -G*M/r^2"
    },
    {
      "step": 13,
      "description": "Substitute `dot(theta) = h/r^2` from angular momentum conservation.",
      "equation": "ddot(r) - r*(h^2/r^4) = -G*M/r^2"
    },
    {
      "step": 14,
      "description": "Simplify the radial equation of motion.",
      "equation": "ddot(r) - h^2/r^3 = -G*M/r^2"
    },
    {
      "step": 15,
      "description": "Binet substitution: let `u = 1/r` and calculate derivatives using `dot(theta) = h*u^2`.",
      "equation": "u = 1/r; dot(r) = -h*(du)/(d theta); ddot(r) = -h^2*u^2*(d^2 u)/(d theta^2)"
    },
    {
      "step": 16,
      "description": "Express the centrifugal term in terms of `u`.",
      "equation": "r*dot(theta)^2 = (1/u)*(h^2*u^4) = h^2*u^3"
    },
    {
      "step": 17,
      "description": "Substitute all expressions into the radial equation.",
      "equation": "(-h^2*u^2*(d^2 u)/(d theta^2)) - h^2*u^3 = -G*M*u^2"
    },
    {
      "step": 18,
      "description": "Simplify to get the standard orbital differential equation.",
      "equation": "(d^2 u)/(d theta^2) + u = G*M/h^2"
    },
    {
      "step": 19,
      "description": "General solution to the linear ODE with constant coefficient.",
      "equation": "u(theta) = G*M/h^2 + C*cos(theta - theta_0)"
    },
    {
      "step": 20,
      "description": "Choose coordinates so periapsis is at `theta = 0` and define eccentricity `e = C*h^2/(G*M)`.",
      "equation": "u(theta) = (G*M/h^2)*(1 + e*cos(theta))"
    },
    {
      "step": 21,
      "description": "Invert to get `r(theta)` and define semi-latus rectum `p = h^2/(G*M)`.",
      "equation": "r(theta) = h^2/(G*M*(1 + e*cos(theta)))"
    },
    {
      "step": 22,
      "description": "Standard conic section form with semi-latus rectum `p`.",
      "equation": "p := h^2/(G*M); r(theta) = p/(1 + e*cos(theta))"
    },
    {
      "step": 23,
      "description": "For ellipse case (`e < 1`), calculate periapsis and apoapsis radii.",
      "equation": "r_p = p/(1 + e); r_a = p/(1 - e)"
    },
    {
      "step": 24,
      "description": "Semi-major axis is the average of periapsis and apoapsis radii, giving `p = a*(1-e^2)`.",
      "equation": "a = (r_p + r_a)/2 = p/(1 - e^2)"
    },
    {
      "step": 25,
      "description": "Kepler's First Law: substitute `p = a*(1-e^2)` to get the standard ellipse equation.",
      "equation": "r(theta) = (a*(1 - e^2))/(1 + e*cos(theta))"
    },
    {
      "step": 26,
      "description": "From `p = h^2/(G*M)` and `p = a*(1-e^2)`, we get the relationship between specific angular momentum and orbital parameters.",
      "equation": "h^2 = G*M*a*(1 - e^2)"
    },
    {
      "step": 27,
      "description": "Total area of the ellipse with semi-major axis `a` and semi-minor axis `b = a*sqrt(1-e^2)`.",
      "equation": "A_text{ellipse} = pi*a*b = pi*a^2*sqrt(1 - e^2)"
    },
    {
      "step": 28,
      "description": "Period is total area divided by areal velocity. Use `dot(A) = h/2` from Kepler's 2nd law.",
      "equation": "T = A_text{ellipse} / dot(A) = (pi*a^2*sqrt(1 - e^2)) / (h/2)"
    },
    {
      "step": 29,
      "description": "Simplify the period expression.",
      "equation": "T = (2*pi*a^2*sqrt(1 - e^2)) / h"
    },
    {
      "step": 30,
      "description": "Substitute `h = sqrt(G*M*a*(1-e^2))` from step 26.",
      "equation": "T = (2*pi*a^2*sqrt(1 - e^2)) / sqrt(G*M*a*(1 - e^2))"
    },
    {
      "step": 31,
      "description": "Cancel the `sqrt(1-e^2)` terms to get the period in terms of `a`, `G`, and `M` only.",
      "equation": "T = (2*pi*a^(3/2)) / sqrt(G*M)"
    },
    {
      "step": 32,
      "description": "Kepler's Third Law: square both sides to get the final relationship `T^2 ∝ a^3`.",
      "equation": "T^2 = (4*pi^2*a^3) / (G*M)"
    }
  ],
  "programmatic_verification": {
    "language": "python 3.11.12",
    "library": "sympy 1.12.0",
    "code": [
      "import sympy as sp",
      "",
      "# ===============================",
      "# Programmatic verification (step-by-step) for Kepler's Laws",
      "# Python 3.11, SymPy 1.12",
      "# Each block mirrors the derivation steps and includes asserts.",
      "# ===============================",
      "",
      "# Common symbols",
      "t = sp.symbols('t', real=True)",
      "G, M, m = sp.symbols('G M m', positive=True, real=True)",
      "a, e, h = sp.symbols('a e h', positive=True, real=True)",
      "theta = sp.symbols('theta', real=True)",
      "pi = sp.pi",
      "",
      "# --- Step 1-2: Central (radial) force and zero torque ---------------------",
      "# Represent a radial direction by an arbitrary vector u (unit length not required for the cross-product identity).",
      "u1, u2, u3 = sp.symbols('u1 u2 u3', real=True)",
      "u = sp.Matrix([u1, u2, u3])",
      "r = sp.symbols('r', positive=True, real=True)",
      "r_vec = r * u",
      "F_vec = -G*M*m/r**2 * u   # gravitational force is parallel to r",
      "tau_vec = sp.simplify(r_vec.cross(F_vec))",
      "assert tau_vec == sp.Matrix([0,0,0])  # torque is zero for parallel vectors",
      "print('OK: Step 1-2 – torque τ = r×F vanishes for a central force.')",
      "",
      "# --- Step 3-6: Angular momentum conservation and areal velocity -----------",
      "# From τ = 0 ⇒ dL/dt = 0. We also verify dA/dt = (1/2)|r×v| = L/(2m).",
      "r_t = sp.Function('r')(t)",
      "th_t = sp.Function('theta')(t)",
      "x = r_t*sp.cos(th_t)",
      "y = r_t*sp.sin(th_t)",
      "r_cart = sp.Matrix([x, y, 0])",
      "v_cart = sp.diff(r_cart, t)",
      "cross_rv_z = sp.simplify(sp.Matrix([0,0,1]).dot(r_cart.cross(v_cart)))  # z-component of r×v",
      "assert sp.simplify(cross_rv_z - r_t**2*sp.diff(th_t, t)) == 0",
      "# Angular momentum (planar): L_z = m * (r×v)_z  ⇒  dA/dt = (1/2)*(r×v)_z = L/(2m)",
      "print('OK: Step 5-6 – areal velocity dA/dt = L/(2m) is constant.')",
      "",
      "# --- Step 7-18: Binet equation via θ as independent variable --------------",
      "# Use h := r^2*θ̇ (specific angular momentum, constant). With u(θ) := 1/r,",
      "# we get ṙ = -h u', r̈ = -h^2 u^2 u'' and r θ̇^2 = h^2 u^3.",
      "u = sp.Function('u')(theta)",
      "ud = sp.diff(u, theta)",
      "udd = sp.diff(u, theta, 2)",
      "theta_dot = h*u**2",
      "drdtheta = sp.diff(1/u, theta)           # = -u'/u^2",
      "drdt = sp.simplify(drdtheta * theta_dot)  # = -h*u'",
      "d2rdt2 = sp.simplify(sp.diff(drdtheta * theta_dot, theta) * theta_dot)  # chain rule ⇒ -h^2 u^2 u''",
      "centrifugal = sp.simplify((1/u) * theta_dot**2)  # r*θ̇^2 = h^2 u^3",
      "# Radial EOM: r̈ - r θ̇^2 = -GM/r^2  ⇒  (-h^2 u^2 u'') - h^2 u^3 = -GM u^2",
      "expr = sp.simplify((d2rdt2 - centrifugal + G*M*u**2)/(-h**2*u**2))",
      "assert sp.simplify(expr - (udd + u - G*M/h**2)) == 0",
      "print('OK: Step 18 – Binet equation u\" + u = GM/h² obtained.')",
      "",
      "# --- Step 19-25: Solve orbit shape and express r(θ) -----------------------",
      "C1, C2 = sp.symbols('C1 C2', real=True)",
      "ode = sp.Eq(sp.diff(sp.Function('u')(theta), (theta, 2)) + sp.Function('u')(theta), G*M/h**2)",
      "sol = sp.dsolve(ode)  # u(θ) = C1 sinθ + C2 cosθ + GM/h²",
      "# Choose periapsis at θ=0 ⇒ C1=0 and define e so that C2 = e*(GM/h²).",
      "u_sol = (G*M/h**2)*(1 + e*sp.cos(theta))",
      "p = sp.simplify(h**2/(G*M))",
      "r_theta = sp.simplify(1/u_sol)",
      "r_conic = sp.simplify(p/(1 + e*sp.cos(theta)))",
      "assert sp.simplify(r_theta - r_conic) == 0",
      "print('OK: Step 20-22 – conic solution r(θ) = p / (1 + e cosθ).')",
      "",
      "# --- Step 23-26: Ellipse relations, semi-major axis, and h² relation ------",
      "r_p = sp.simplify(r_conic.subs(theta, 0))",
      "r_a = sp.simplify(r_conic.subs(theta, sp.pi))",
      "assert sp.simplify(r_p - p/(1+e)) == 0 and sp.simplify(r_a - p/(1-e)) == 0",
      "a_from_ra_rp = sp.simplify((r_p + r_a)/2)         # ⇒ p/(1-e²)",
      "assert sp.simplify(a_from_ra_rp - p/(1 - e**2)) == 0",
      "assert sp.simplify(h**2 - G*M*(p)) == 0           # by definition of p",
      "assert sp.simplify(h**2 - G*M*a_from_ra_rp*(1 - e**2)) == 0  # substituting a = p/(1-e²)",
      "print('OK: Step 23-26 – ellipse geometry and h² = GM a (1-e²).')",
      "",
      "# --- Step 27-32: Area, period, and Kepler's 3rd law -----------------------",
      "b = a*sp.sqrt(1 - e**2)",
      "A_ellipse = sp.simplify(pi*a*b)                    # πab",
      "T = sp.simplify(A_ellipse / (h/2))                 # using dA/dt = h/2",
      "T_expected = sp.simplify(2*pi*a**(sp.Rational(3,2)) / sp.sqrt(G*M))",
      "assert sp.simplify(T.subs(h, sp.sqrt(G*M*a*(1-e**2))) - T_expected) == 0",
      "assert sp.simplify(T_expected**2 - (4*pi**2*a**3)/(G*M)) == 0",
      "print('OK: Step 27-32 – T = 2π a^{3/2}/√(GM) and T² = 4π² a³/(GM).')",
      "",
      "# --- Additional consistency checks ---------------------------------------",
      "a_var = sp.symbols('a_var', positive=True)",
      "r_kepler1 = sp.simplify((a_var*(1 - e**2))/(1 + e*sp.cos(theta)))",
      "assert sp.simplify(r_kepler1.subs(theta, 0) - a_var*(1-e)) == 0",
      "assert sp.simplify(r_kepler1.subs(theta, pi) - a_var*(1+e)) == 0",
      "assert sp.simplify(r_kepler1.subs(e, 0) - a_var) == 0",
      "print('OK: Special cases – periapsis, apoapsis, and circular limit e=0.')",
      "",
      "# Solar-system sanity check: Earth vs Mars (units: AU and years)",
      "a_earth, a_mars = sp.Rational(1,1), sp.Rational(152,100)",
      "T_earth, T_mars = sp.Rational(1,1), sp.Rational(188,100)",
      "ratio_periods  = sp.nsimplify((T_earth**2) / (T_mars**2))",
      "ratio_distances = sp.nsimplify((a_earth**3) / (a_mars**3))",
      "assert abs(float(ratio_periods - ratio_distances)) < 0.01",
      "print('OK: Numerical check – (T₁/T₂)² ≈ (a₁/a₂)³ for Earth/Mars (≤1% error).')",
      "",
      "print('All Kepler verifications passed ✔')"
    ]
  },
  "domain": "astro-ph",
  "theory_status": "historical",
  "validity_regime": {
    "conditions": [
      "Two-body gravitational systems",
      "Central massive body much larger than orbiting body",
      "Elliptical orbits in inverse-square force field",
      "No relativistic effects"
    ],
    "limitations": [
      "Empirical laws without underlying force explanation",
      "Limited to two-body problems",
      "Does not account for perturbations from other bodies",
      "No relativistic corrections included"
    ]
  },
  "superseded_by": ["newtonian_gravitation", "general_relativity"],
  "historical_context": {
    "importance": "First accurate description of planetary motion, led to Newton's universal gravitation",
    "development_period": "1609-1619",
    "key_insights": [
      "Elliptical orbits replace circular ones",
      "Area law reveals non-uniform motion",
      "Period-distance mathematical relationship"
    ]
  },
  "references": [
    {
      "id": "R1",
      "citation": "Kepler, J. (1609). Astronomia Nova. Heidelberg: Gotthard Vögelin."
    },
    {
      "id": "R2",
      "citation": "Newton, I. (1687). Philosophiæ Naturalis Principia Mathematica. Joseph Streater."
    }
  ],
  "dependencies": ["newtonian_mechanics", "conservation_laws"],
  "contributors": [
    {
      "full_name": "Manuel Sánchez Hernández",
      "identifier": "ORCID 0009-0006-4904-3695"
    }
  ],
  "review_status": "reviewed"
}
