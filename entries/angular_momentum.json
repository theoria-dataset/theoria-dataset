{
  "result_id": "angular_momentum",
  "result_name": "Angular Momentum",
  "result_equations": [
    {
      "id": "angular_momentum_definition",
      "equation": "vec(L) = vec(r) xx vec(p) = vec(r) xx m vec(v)"
    },
    {
      "id": "angular_momentum_rigid_body",
      "equation": "vec(L) = I vec(omega)"
    },
    {
      "id": "torque_angular_momentum",
      "equation": "vec(tau) = (d vec(L))/(dt)"
    },
    {
      "id": "conservation_angular_momentum",
      "equation": "vec(L)_total = text(\"constant\") , text(\"when\") vec(tau)_ext = 0"
    }
  ],
  "explanation": "Angular momentum is the rotational analog of linear momentum, representing the quantity of rotation of an object. It depends on the object's moment of inertia, angular velocity, and the distribution of mass relative to the axis of rotation.",
  "definitions": [
    {
      "symbol": "vec(L)",
      "definition": "Angular momentum vector"
    },
    {
      "symbol": "vec(r)",
      "definition": "Position vector from axis to point mass"
    },
    {
      "symbol": "vec(p)",
      "definition": "Linear momentum"
    },
    {
      "symbol": "m",
      "definition": "Mass"
    },
    {
      "symbol": "vec(v)",
      "definition": "Velocity vector"
    },
    {
      "symbol": "I",
      "definition": "Moment of inertia"
    },
    {
      "symbol": "vec(omega)",
      "definition": "Angular velocity vector"
    },
    {
      "symbol": "vec(tau)",
      "definition": "Torque vector"
    },
    {
      "symbol": "vec(tau)_ext",
      "definition": "External torque"
    }
  ],
  "assumptions": [
    {
      "id": "assumption1",
      "text": "Classical mechanics"
    },
    {
      "id": "assumption2",
      "text": "Well-defined rotation axis"
    },
    {
      "id": "assumption3",
      "text": "Rigid body approximation (for I×ω form)"
    },
    {
      "id": "assumption4",
      "text": "Inertial reference frame"
    },
    {
      "id": "assumption5",
      "text": "Newton's second law applies"
    },
    {
      "id": "assumption6",
      "text": "Position vector is measured from fixed point"
    },
    {
      "id": "assumption7",
      "text": "Cross product properties"
    }
  ],
  "derivation": [
    {
      "step": 1,
      "description": "Start from the definition of angular momentum for a point mass.",
      "equation": "vec(L) = vec(r) xx vec(p)"
    },
    {
      "step": 2,
      "description": "Differentiate L with respect to time to relate torque and angular momentum.",
      "equation": "(d vec(L))/(dt) = d/dt ( vec(r) xx vec(p) )"
    },
    {
      "step": 3,
      "description": "Use the product rule for the cross product.",
      "equation": "(d vec(L))/(dt) = (d vec(r))/(dt) xx vec(p) + vec(r) xx (d vec(p))/(dt)"
    },
    {
      "step": 4,
      "description": "Substitute kinematic and dynamic relations.",
      "equation": "(d vec(r))/(dt) = vec(v) , (d vec(p))/(dt) = vec(F)"
    },
    {
      "step": 5,
      "description": "Insert the substitutions and note p = m vec(v).",
      "equation": "(d vec(L))/(dt) = vec(v) xx m vec(v) + vec(r) xx vec(F)"
    },
    {
      "step": 6,
      "description": "The cross product of parallel vectors vanishes.",
      "equation": "vec(v) xx m vec(v) = 0"
    },
    {
      "step": 7,
      "description": "Identify torque as tau = r × F to obtain the result.",
      "equation": "(d vec(L))/(dt) = vec(r) xx vec(F) = vec(tau)"
    }
  ],
  "programmatic_verification": {
    "language": "python 3.11.12",
    "library": "math (stdlib)",
    "code": [
      "import math",
      "",
      "print('Angular Momentum Verification\\n')",
      "print('=' * 40)",
      "",
      "# Test 1: Point mass in circular motion",
      "def verify_point_mass_circular():",
      "    \"\"\"Verify angular momentum for point mass in circular motion\"\"\"",
      "    print('Test 1: Point mass in circular motion')",
      "    ",
      "    m = 2.0     # mass in kg",
      "    r = 1.5     # radius in m",
      "    omega = 3.0 # angular velocity in rad/s",
      "    v = omega * r # tangential velocity",
      "    ",
      "    # Angular momentum magnitude",
      "    L_magnitude = m * v * r  # L = m v r for circular motion",
      "    ",
      "    # Using I*omega (moment of inertia for point mass: I = m r^2)",
      "    I = m * r**2",
      "    L_rigid_body = I * omega",
      "    ",
      "    print(f'  Mass: {m} kg')",
      "    print(f'  Radius: {r} m')",
      "    print(f'  Angular velocity: {omega} rad/s')",
      "    print(f'  Tangential velocity: {v} m/s')",
      "    print(f'  L = m v r: {L_magnitude:.3f} kg·m²/s')",
      "    print(f'  L = I ω: {L_rigid_body:.3f} kg·m²/s')",
      "    print(f'  Agreement: {math.isclose(L_magnitude, L_rigid_body)}')",
      "    print()",
      "    ",
      "    return math.isclose(L_magnitude, L_rigid_body)",
      "",
      "# Test 2: Conservation of angular momentum",
      "def verify_conservation_skater():",
      "    \"\"\"Verify conservation using figure skater example\"\"\"",
      "    print('Test 2: Figure skater conservation')",
      "    ",
      "    # Initial state: arms extended",
      "    I1 = 5.0     # kg·m²",
      "    omega1 = 2.0 # rad/s",
      "    L1 = I1 * omega1",
      "    ",
      "    # Final state: arms pulled in",
      "    I2 = 1.5     # kg·m²",
      "    # Conservation: L1 = L2, so omega2 = L1/I2",
      "    omega2 = L1 / I2",
      "    L2 = I2 * omega2",
      "    ",
      "    # Energy comparison",
      "    E1 = 0.5 * I1 * omega1**2",
      "    E2 = 0.5 * I2 * omega2**2",
      "    ",
      "    print(f'  Initial: I = {I1} kg·m², ω = {omega1} rad/s')",
      "    print(f'  Final: I = {I2} kg·m², ω = {omega2:.3f} rad/s')",
      "    print(f'  Initial L: {L1:.3f} kg·m²/s')",
      "    print(f'  Final L: {L2:.3f} kg·m²/s')",
      "    print(f'  Angular momentum conserved: {math.isclose(L1, L2)}')",
      "    print(f'  Initial rotational energy: {E1:.3f} J')",
      "    print(f'  Final rotational energy: {E2:.3f} J')",
      "    print(f'  Energy increased: {E2 > E1} (work done by muscles)')",
      "    print()",
      "    ",
      "    return math.isclose(L1, L2)",
      "",
      "# Run tests",
      "test1 = verify_point_mass_circular()",
      "test2 = verify_conservation_skater()",
      "",
      "print('Summary of Angular Momentum Verifications:')",
      "print(f'Point mass circular motion: {test1}')",
      "print(f'Figure skater conservation: {test2}')",
      "print(f'All tests passed: {all([test1, test2])}')",
      "",
      "print('\\nAngular momentum relationships verified successfully!')"
    ]
  },
  "domain": "physics.class-ph",
  "theory_status": "current",
  "validity_regime": {
    "conditions": [
      "Classical mechanics",
      "Well-defined rotation axes",
      "Rigid body approximation",
      "Non-relativistic speeds"
    ],
    "limitations": [
      "Relativistic corrections needed at high speeds",
      "Quantum angular momentum is quantized",
      "Deformable body complications",
      "Precession in non-inertial frames"
    ]
  },
  "historical_context": {
    "development_period": "17th-19th century",
    "importance": "Fundamental conservation law; essential for understanding rotational motion, planetary dynamics, and quantum mechanics",
    "key_insights": [
      "Newton's laws of motion provided the foundation for understanding rotational dynamics",
      "Euler's contributions to rigid body mechanics and moment of inertia calculations",
      "Lagrange's analytical mechanics formalism extended conservation principles"
    ]
  },
  "references": [
    {
      "id": "ref1",
      "citation": "Goldstein, H., Poole, C., & Safko, J. (2001). Classical Mechanics. Addison Wesley."
    },
    {
      "id": "ref2",
      "citation": "Halliday, D., Resnick, R., & Walker, J. (2013). Fundamentals of Physics. Wiley."
    }
  ],
  "dependencies": ["newtons_laws", "conservation_of_momentum"],
  "contributors": [
    {
      "full_name": "Synthetic entry",
      "identifier": "AI created. May have mistakes, looking for contributors to this entry."
    }
  ],
  "review_status": "draft"
}
